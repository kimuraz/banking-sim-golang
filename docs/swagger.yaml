basePath: /api/v1
definitions:
  handlers.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handlers.TransactionResponse:
    properties:
      account:
        type: string
      account_id:
        type: integer
      amount:
        type: number
      category_id:
        type: integer
      datetime:
        type: string
      id:
        type: integer
      to_account:
        type: string
      to_account_id:
        type: integer
    type: object
  models.Account:
    properties:
      account_number:
        type: string
      balance:
        type: number
      deleted_at:
        type: string
      id:
        type: integer
      user_id:
        type: integer
    type: object
  models.Instrument:
    properties:
      deleted_at:
        type: string
      id:
        type: integer
      instrument_category_id:
        type: integer
      name:
        type: string
      price:
        type: number
      symbol:
        type: string
    type: object
  models.InstrumentCategory:
    properties:
      deleted_at:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.Investment:
    properties:
      amount:
        type: number
      deleted_at:
        type: string
      id:
        type: integer
      instrument_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      deleted_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      token:
        type: string
    type: object
info:
  contact: {}
  description: |-
    This is a read-only API for simulating banking operations.
    It allows you to get accounts, transactions, instruments, and investments.
    The endpoints that support pagination have a default page size of 15 and a maximum of 100. To check the total number of items, you can look at the `X-Total-Count` header.
    It requires authentication for most of the endpoints. You can use any email from the emails endpoint with password `password`.
    The API is rate-limited to 100 requests per second.
    There's a special websocket endpoint that allows you to get real-time updates on the instruments prices. You can connect to it using the `ws` endpoint.
    The websocket endpoint requires authentication, you can use the token from auth endpoint with `?token=[token]`
    The websocket will send you a message in random intervals with the updated prices of the instruments with id's that you pass as query param `?id=1,2,3`.
    The message will be in the following format: `{"id":1,"price":100.0, "datetime": "2024-01-01T00:00:00Z"}`
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Banking Simulation API
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: Get all accounts for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Account'
            type: array
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Get accounts
      tags:
      - accounts
  /accounts/{account_id}/transactions:
    get:
      consumes:
      - application/json
      description: Get all transactions for the authenticated user
      parameters:
      - description: Account ID
        in: path
        name: account_id
        required: true
        type: string
      - description: Date from
        in: query
        name: date_from
        type: string
      - description: Date to
        in: query
        name: date_to
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Order by date ASC or DESC
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.TransactionResponse'
            type: array
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Get transactions
      tags:
      - accounts
      - transactions
  /auth:
    post:
      consumes:
      - application/json
      description: Login, note that the password is just `password`
      parameters:
      - description: Login
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Login
      tags:
      - auth
  /emails:
    get:
      consumes:
      - application/json
      description: Get all emails, use it for auth
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: Get emails
      tags:
      - emails
  /instruments:
    get:
      consumes:
      - application/json
      description: Get all instruments
      parameters:
      - description: Category ID
        in: query
        name: category_id
        type: string
      - description: Search by name
        in: query
        name: q
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Order by price ASC or DESC
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Instrument'
            type: array
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Get investments instruments
      tags:
      - instruments
  /instruments_categories:
    get:
      consumes:
      - application/json
      description: Get all instruments categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InstrumentCategory'
            type: array
      security:
      - BearerAuth: []
      summary: Get investments instruments categories
      tags:
      - instruments
  /investments:
    get:
      consumes:
      - application/json
      description: Get all investments for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Investment'
            type: array
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Get investments
      tags:
      - investments
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
